{"version":3,"sources":["webpack:///src/app/login/login.page.html","webpack:///src/app/location.service.ts","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.scss","webpack:///src/app/login/login.page.ts","webpack:///src/app/model/session.model.ts","webpack:///src/app/model/user.model.ts"],"names":["LocationService","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","resp","lng","coords","longitude","lat","latitude","err","providedIn","routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","authSvc","jsonService","router","locationService","sessionService","alertService","getLocation","email","password","login","value","user","isVerified","isEmailVerified","redirectUser","console","log","subscribe","data","session","setSessionLoggedIn","navigate","error","FailedAlert","loginGoogle","getPosition","then","pos","selector","template","Session","User"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-title>Login</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <form>\\r\\n    <ion-item lines=\\\"full\\\">\\r\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\r\\n      <ion-input type=\\\"text\\\" #email required></ion-input>\\r\\n    </ion-item>\\r\\n    <ion-item lines=\\\"full\\\">\\r\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n      <ion-input type=\\\"password\\\" #password required></ion-input>\\r\\n    </ion-item>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <ion-button type=\\\"submit\\\" (click)=\\\"login  (email, password)\\\" expand=\\\"block\\\">Login</ion-button>\\r\\n      </ion-col>\\r\\n     \\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <p class=\\\"ion-text-end\\\">\\r\\n          <a routerLink=\\\"/forgot-password\\\">Forgot password? </a>\\r\\n        </p>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </form>\\r\\n  <ion-row>\\r\\n    <ion-col>\\r\\n      <p class=\\\"ion-text-end\\\">\\r\\n        <a routerLink=\\\"/register\\\">Create an account </a>\\r\\n      </p>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n\\r\\n</ion-content>\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService {\n\n  constructor() { }\n\n  \ngetPosition(): Promise<any> {\n  return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resp => {\n              resolve({lng: resp.coords.longitude, lat: resp.coords.latitude});\n          },\n          err => {\n              reject(err);\n        });\n  });\n}\n\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\nimport { NavMenuComponent } from \"../nav-menu/nav-menu.component\";\r\nimport { LoginPage } from './login.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule\r\n  ],\r\n  exports: [NavMenuComponent],\r\n  declarations: [LoginPage, NavMenuComponent]\r\n})\r\nexport class LoginPageModule {}\r\n","export default \".center-span {\\n  display: block;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vQzpcXFVzZXJzXFxkYXZpZC5tYWxhZ29uXFxub3Rhcy9zcmNcXGFwcFxcbG9naW5cXGxvZ2luLnBhZ2Uuc2NzcyIsInNyYy9hcHAvbG9naW4vbG9naW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBQTtFQUNBLGtCQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9sb2dpbi9sb2dpbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2VudGVyLXNwYW4ge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4iLCIuY2VudGVyLXNwYW4ge1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufSJdfQ== */\";","import { AuthService } from './../services/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LocationService } from '../location.service';\r\nimport { JsonService } from '../services/json.service';\r\nimport { Session } from '../model/session.model';\r\nimport { SessionService } from '../services/session.service';\r\nimport { User } from '../model/user.model';\r\nimport Swal from 'sweetalert2';\r\nimport { AlertService } from '../alert.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage implements OnInit {\r\n\r\n  latitude= 4.586303;\r\n  longitude= -74.227348;\r\n  session: Session;\r\n  message: string;\r\n\r\n  constructor(private authSvc: AuthService, private jsonService: JsonService,\r\n    private router: Router, private locationService: LocationService, private sessionService: SessionService,\r\n    private alertService: AlertService) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.getLocation();\r\n  }\r\n\r\n  async onLogin(email, password) {\r\n    try {\r\n      const user = await this.authSvc.login(email.value, password.value);\r\n      if (user) {\r\n        const isVerified = this.authSvc.isEmailVerified(user);\r\n        this.redirectUser(isVerified);\r\n      }\r\n    } catch (error) {\r\n      console.log('Error->', error);\r\n    }\r\n  }\r\n\r\n  login(email, password) {\r\n    try {\r\n      this.jsonService.login(this.latitude, this.longitude, email.value, password.value).subscribe((data) => {\r\n        let user: User;\r\n        user = data;\r\n        let session = new Session;\r\n        session.user = user;\r\n        if (User != null) {\r\n          this.sessionService.setSessionLoggedIn(session);\r\n          this.router.navigate(['profile']);\r\n        }\r\n      }, (error) => {\r\n        this.alertService.FailedAlert(\"Credenciales incorrectas o servidor caido\")\r\n      });\r\n    } catch (error) {\r\n      console.log('Error->', error);\r\n    }\r\n  }\r\n\r\n  async onLoginGoogle() {\r\n    try {\r\n      const user = await this.authSvc.loginGoogle();\r\n      if (user) {\r\n        const isVerified = this.authSvc.isEmailVerified(user);\r\n        this.redirectUser(isVerified);\r\n      }\r\n    } catch (error) {\r\n      console.log('Error->', error);\r\n    }\r\n  }\r\n\r\n  private redirectUser(isVerified: boolean): void {\r\n    if (isVerified) {\r\n      this.router.navigate(['admin']);\r\n    } else {\r\n      this.router.navigate(['verify-email']);\r\n    }\r\n  }\r\n\r\n  getLocation() {\r\n    this.locationService.getPosition().then(pos => {\r\n      this.latitude = pos.lat;\r\n      this.longitude = pos.lng;\r\n    });\r\n\r\n  }\r\n\r\n  \r\n}\r\n","import { Student } from \"./student.model\";\r\nimport { Subject } from \"./subject.model\";\r\nimport { User } from \"./user.model\";\r\n\r\nexport class Session {\r\n  user: User;\r\n  subject: Subject[];\r\n  student: Student;\r\n}\r\n","export class User {\r\n    name: string;\r\n    lastname: string;\r\n    code: string;\r\n    birthdate: Date;\r\n    degree: string;\r\n    email: string;\r\n    password: string;\r\n    id_rol: number;\r\n}"]}